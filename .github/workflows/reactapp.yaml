name: Reactapp Workflow
on:
  push:
    branches:
      - main

jobs:
  unit-testing:
    name: Unit testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup Nodejs version-10
        uses: actions/setup-node@v3
        with:
          node-version: 10
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm install
        working-directory: ./api
      - name: Unit testing
        run: npm test
        working-directory: ./api
      - name: Archive test result
        uses: actions/upload-artifact@v3
        with:
          name: test-result
          path: ./api/test-result.json
  docker:
    name: Containerization
    permissions: 
      packages: write
    runs-on: ubuntu-latest
    needs: [unit-testing]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Dockerhub login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker build for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/reactapp:${{ github.sha }}
      - name: Docker image testing
        run: |
          docker images
          docker run --name reactapp -d \
            -p 3080:3080 \
            ${{ vars.DOCKERHUB_USERNAME }}/reactapp:${{ github.sha }}
          export IP=$( docker inspect -f '{{ range.NetworkSettings.Networks }}{{ .IPAddress }}{{ end }}' reactapp)
          echo $IP
      - name: Docker push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/reactapp:${{ github.sha }}
      - name: GHCR login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Container Registry push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/reactapp:${{ github.sha }}
  dev-deploy:
    needs: docker
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Install kubectl
        run: sudo snap install kubectl --classic
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name my-eks-cluster --region ${{ vars.AWS_REGION }}    
      - name: Fetch kubernetes cluster details
        run: |
          kubectl version
          echo ---------------------------------
          kubectl get nodes
      - name: Replace token in manifest files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/reactapp:${{ github.sha }}
      - name: Check files
        run: |
          cat kubernetes/development/*.yaml
      - name: Create namespace if not exists
        run: |
          kubectl create namespace development || true
      - name: Deploy to EKS cluster
        run: |
          kubectl apply -f kubernetes/development




