name: Reactapp Workflow
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  
jobs:
  unit-testing:
    name: Unit testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup Nodejs version-10
        uses: actions/setup-node@v3
        with:
          node-version: 10
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm install
        working-directory: ./api
      - name: Unit testing
        run: npm test
        working-directory: ./api
      - name: Archive test result
        uses: actions/upload-artifact@v3
        with:
          name: test-result
          path: ./api/test-result.json
  docker:
    name: Containerization
    permissions: 
      packages: write
    runs-on: ubuntu-latest
    needs: [unit-testing]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Dockerhub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Docker build for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/reactapp:${{ github.sha }}
      - name: Docker image testing
        run: |
          docker images
          docker run --name reactapp -d \
            -p 3080:3080 \
            ${{ secrets.DOCKERHUB_USERNAME }}/reactapp:${{ github.sha }}
          export IP=$( docker inspect -f '{{ range.NetworkSettings.Networks }}{{ .IPAddress }}{{ end }}' reactapp)
  dev-deploy:
    needs: docker
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{secrets.AZURE_CLIENT_ID}}
          tenant-id: ${{secrets.AZURE_TENANT_ID}}
          subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID}}
      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Deploying to Azure VM staging server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
 
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}
 
      - name: Install Docker on Azure VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} << 'EOF'
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce
            sudo systemctl start docker
            sudo systemctl enable docker         
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/reactapp:${{ github.sha }}                     
            sudo docker run -d -p 3080:3080 --name reactapp ${{ secrets.DOCKERHUB_USERNAME }}/reactapp:${{ github.sha }}
            sudo docker ps
          EOF       
            